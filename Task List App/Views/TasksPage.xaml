<Page
    x:Class="Task_List_App.Views.TasksPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:behaviors="using:Task_List_App.Behaviors"
    xmlns:ctrls="using:CommunityToolkit.WinUI.UI.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:extras="using:Task_List_App.Controls"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:model="using:Task_List_App.Models"
    x:Name="ThisPage"
    behaviors:NavigationViewHeaderBehavior.HeaderMode="Always"
    mc:Ignorable="d">

    <!--
        [If you want to see how it looks using the compact density then uncomment the code below]
    -->
    <!--
    <Page.Resources>
        <ResourceDictionary Source="ms-appx:///Microsoft.UI.Xaml/DensityStyles/Compact.xaml" />
    </Page.Resources>
    -->

    <Grid
        x:Name="ContentArea"
        FocusVisualMargin="-4"
        FocusVisualPrimaryBrush="{ThemeResource QuinaryBrush}"
        FocusVisualPrimaryThickness="1"
        FocusVisualSecondaryBrush="{ThemeResource QuinaryBrush}"
        FocusVisualSecondaryThickness="0">
        <StackPanel Orientation="Horizontal">
            <StackPanel.Transitions>
                <TransitionCollection>
                    <PopupThemeTransition />
                </TransitionCollection>
            </StackPanel.Transitions>
            <!--  Command Buttons  -->
            <CommandBar
                Margin="-16,0,0,0"
                Background="Transparent"
                DefaultLabelPosition="Right"
                IsEnabled="{x:Bind ViewModel.IsBusy, Mode=OneWay, Converter={StaticResource BooleanInverter}}">
                <AppBarButton
                    x:Name="AddTask"
                    x:Uid="AppBar_Add"
                    Click="AddTask_Click"
                    ToolTipService.ToolTip="Add a new task (shortcut Alt-A)">
                    <AppBarButton.Icon>
                        <FontIcon FontFamily="Segoe MDL2 Assets" Glyph="{StaticResource AddTo}" />
                        <!--  [Other icon options]  -->
                        <!-- <ImageIcon Source="ms-appx:///Assets/Add_Icon.png" /> -->
                        <!-- <BitmapIcon UriSource="ms-appx:///Assets/Add_Icon.png" /> -->
                    </AppBarButton.Icon>
                </AppBarButton>
                <AppBarButton
                    x:Name="SaveTask"
                    x:Uid="AppBar_Save"
                    Click="SaveTask_Click"
                    Icon="Sync"
                    ToolTipService.ToolTip="Save and re-sort all tasks (shortcut Alt-S)" />
                <AppBarButton
                    x:Name="SortTask"
                    x:Uid="AppBar_Sort"
                    Click="SortTask_Click"
                    Icon="Sort"
                    ToolTipService.ToolTip="Re-sort all tasks" />
                <AppBarButton
                    x:Name="DuplicateTask"
                    x:Uid="AppBar_Clone"
                    Click="CloneTask_Click"
                    Icon="Copy"
                    IsEnabled="{x:Bind Path=ViewModel.CurrentlySelectedTask, Mode=OneWay, Converter={StaticResource ValueToEnabled}}"
                    ToolTipService.ToolTip="Creates a copy of the selected task" />
                <AppBarButton
                    x:Name="RemoveCompletedTasks"
                    x:Uid="AppBar_Remove"
                    Click="RemoveCompletedTask_Click"
                    ToolTipService.ToolTip="Removes all completed tasks">
                    <AppBarButton.Icon>
                        <FontIcon FontFamily="Segoe MDL2 Assets" Glyph="{StaticResource Broom}" />
                        <!--  [Other icon options]  -->
                        <!-- <ImageIcon Source="ms-appx:///Assets/Check_Logo.png" /> -->
                        <!-- <BitmapIcon UriSource="ms-appx:///Assets/Check_Logo.png" /> -->
                    </AppBarButton.Icon>
                    <!--
                    NOTE: This keyboard event is only triggered when the control has focus.
                    <AppBarButton.KeyboardAccelerators>
                        <KeyboardAccelerator Key="R" Modifiers="Control" />
                    </AppBarButton.KeyboardAccelerators>
                    -->
                </AppBarButton>
            </CommandBar>
            <!--  Busy Indicator  -->
            <ProgressRing
                Width="24"
                Height="24"
                Margin="8,10,8,0"
                HorizontalAlignment="Right"
                VerticalAlignment="Top"
                Foreground="{ThemeResource SecondaryBrush}"
                Visibility="{x:Bind ViewModel.IsBusy, Mode=OneWay, Converter={StaticResource BooleanVisibility}, ConverterParameter=False}" />
            <!--  Info Bars  -->
            <InfoBar
                x:Name="SuccessBar"
                Title="Success"
                FontFamily="{StaticResource CustomFont}"
                IsOpen="false"
                Message="..."
                Severity="Success" />
            <InfoBar
                x:Name="InfoBar"
                Title="Message"
                FontFamily="{StaticResource CustomFont}"
                IsOpen="false"
                Message="..."
                Severity="Informational" />
            <InfoBar
                x:Name="WarningBar"
                Title="Warning"
                FontFamily="{StaticResource CustomFont}"
                IsOpen="False"
                Message="..."
                Severity="Warning" />
            <InfoBar
                x:Name="ErrorBar"
                Title="Error"
                FontFamily="{StaticResource CustomFont}"
                IsOpen="False"
                Message="..."
                Severity="Error" />
        </StackPanel>

        <ListView
            x:Name="TaskListView"
            Margin="-10,70,1,10"
            ItemsSource="{x:Bind ViewModel.TaskItems, Mode=OneWay}"
            ScrollViewer.HorizontalScrollBarVisibility="Auto"
            ScrollViewer.HorizontalScrollMode="Enabled"
            SelectionChanged="TaskListView_SelectionChanged"
            SelectionMode="Single">
            <ListView.Transitions>
                <TransitionCollection>
                    <AddDeleteThemeTransition />
                </TransitionCollection>
            </ListView.Transitions>
            <ListView.ItemTemplate>
                <DataTemplate x:DataType="model:TaskItem">
                    <StackPanel Margin="0,2" Opacity="{x:Bind Completed, Converter={StaticResource BooleanOpacityInverse}}">
                        <Grid ColumnDefinitions="1*,12*,2*,2*,1*,1*">
                            <!--
                                [This can have adverse effects on the built-in styling of certain controls]
                            -->
                            <!--
                            <Grid.Resources>
                                <Style TargetType="TextBox" />
                                    <Setter Property="FontFamily" Value="{StaticResource CustomFont}" />
                                    <Setter Property="FontSize" Value="{StaticResource MediumFontSize}" />
                                </Style>
                            </Grid.Resources>
                            -->
                            <!--
                                [Shadow effect for the time-color rectangle below, you could also use my CompositionShadow control]
                            -->
                            <!--
                            <Rectangle Width="20" Height="20" Margin="0,3,7,0" Fill="Black" RadiusX="10" RadiusY="10" Stroke="Transparent" StrokeThickness="0" />
                            -->
                            <!--#region [Color based on due time]-->
                            <!--
                            <Rectangle
                                Width="20"
                                Height="20"
                                Margin="0,0,9,0"
                                Fill="{x:Bind Time, Converter={StaticResource LevelToBrush}, Mode=OneWay}"
                                RadiusX="5"
                                RadiusY="5"
                                Stroke="{x:Bind Time, Converter={StaticResource LevelToBrushBorder}, Mode=OneWay}"
                                StrokeThickness="3" />
                            -->
                            <!--#endregion-->
                            <!--#region [Color based on elapsed time]-->
                            <Rectangle
                                Width="30"
                                Height="20"
                                Margin="0,0,9,0"
                                HorizontalAlignment="Left"
                                Fill="{Binding DataContext, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource TimeToBrush}}"
                                RadiusX="5"
                                RadiusY="5"
                                Stroke="{Binding DataContext, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource TimeToBrush}, ConverterParameter=Border}"
                                StrokeThickness="3" />
                            <!--#endregion-->

                            <TextBox
                                Grid.Column="1"
                                Margin="0,0,14,0"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Center"
                                AcceptsReturn="True"
                                FontFamily="{StaticResource CustomFont}"
                                FontSize="{StaticResource MediumFontSize}"
                                IsEnabled="{Binding ElementName=ThisPage, Path=ViewModel.IsBusy, Mode=OneWay, Converter={StaticResource BooleanInverter}}"
                                IsSpellCheckEnabled="True"
                                Text="{x:Bind Title, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                TextChanged="TextBox_TextChanged"
                                TextWrapping="Wrap" />

                            <ComboBox
                                x:Name="cbStatus"
                                Grid.Column="2"
                                MinWidth="150"
                                Margin="0,0,14,0"
                                VerticalAlignment="Top"
                                FontFamily="{StaticResource CustomFont}"
                                IsEnabled="{Binding ElementName=ThisPage, Path=ViewModel.IsBusy, Mode=OneWay, Converter={StaticResource BooleanInverter}}"
                                ItemsSource="{Binding ElementName=ThisPage, Path=ViewModel.Status, Mode=OneWay}"
                                SelectedValue="{x:Bind Status, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                SelectionChanged="cbStatus_SelectionChanged"
                                Tag="{Binding}" />

                            <ComboBox
                                x:Name="cbTime"
                                Grid.Column="3"
                                MinWidth="180"
                                Margin="0,0,14,0"
                                VerticalAlignment="Top"
                                FontFamily="{StaticResource CustomFont}"
                                IsEnabled="{Binding ElementName=ThisPage, Path=ViewModel.IsBusy, Mode=OneWay, Converter={StaticResource BooleanInverter}}"
                                ItemsSource="{Binding ElementName=ThisPage, Path=ViewModel.Times, Mode=OneWay}"
                                SelectedValue="{x:Bind Time, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                SelectionChanged="cbTime_SelectionChanged"
                                Tag="{x:Bind Title}" />

                            <Button
                                Grid.Column="4"
                                MinWidth="80"
                                VerticalAlignment="Top"
                                Command="{Binding ElementName=ThisPage, Path=ViewModel.DeleteTaskItemCommand}"
                                CommandParameter="{Binding}"
                                Content="Remove"
                                FontFamily="{StaticResource CustomFont}"
                                IsEnabled="{Binding ElementName=ThisPage, Path=ViewModel.IsBusy, Mode=OneWay, Converter={StaticResource BooleanInverter}}" />
                            <!--
                             [To pass the control to the converter]
                                Foreground="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource TimeToBrush}}"
                             [To pass the object to the converter]
                                Foreground="{Binding DataContext, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource TimeToBrush}}"
                             NOTE: The DataContext for the control may or may not need to be set:
                                DataContext="{Binding}"
                             [MultiBinding could be an option once it's available for WinUI3]
                                https://github.com/microsoft/microsoft-ui-xaml/issues/8334
                                https://learn.microsoft.com/en-us/dotnet/maui/fundamentals/data-binding/multibinding?view=net-maui-8.0
                             [Fix for MultiBinding Support]
                                https://github.com/peter0302/WinUI.Redemption/
                             <Button.Content>
                                 <MultiBinding Converter="{StaticResource TimeToBrush}">
                                     <Binding Path="TaskItem.Created" />
                                     <Binding Path="TaskItem.Time" />
                                 </MultiBinding>
                             </Button.Content>
                            -->

                            <CheckBox
                                Grid.Column="5"
                                MinWidth="120"
                                Margin="10,0,0,0"
                                Padding="0"
                                VerticalAlignment="Top"
                                VerticalContentAlignment="Center"
                                Checked="CheckBox_Checked"
                                Command="{Binding ElementName=ThisPage, Path=ViewModel.ToggleCompletedItemCommand}"
                                CommandParameter="{Binding}"
                                Content=" Done"
                                FontFamily="{StaticResource CustomFont}"
                                IsChecked="{x:Bind Completed, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                IsEnabled="{Binding ElementName=ThisPage, Path=ViewModel.IsBusy, Mode=OneWay, Converter={StaticResource BooleanInverter}}" />

                            <!--
                                [If you want to use the images I created instead of the custom rectangle colors]
                            -->
                            <!--
                            <Image
                                Grid.Column="0"
                                Width="28"
                                Height="28"
                                Margin="0,0,9,0"
                                HorizontalAlignment="Right"
                                Source="{x:Bind Time, Converter={StaticResource LevelToImage}, Mode=OneWay}"}" />
                            -->
                        </Grid>
                    </StackPanel>
                </DataTemplate>
            </ListView.ItemTemplate>
        </ListView>
    </Grid>
</Page>